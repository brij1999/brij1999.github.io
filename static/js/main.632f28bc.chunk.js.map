{"version":3,"sources":["React Components/Layout/Landing/Landing.jsx","React Components/Layout/Experience/Experience.jsx","React Components/Pages/Home/Home.jsx","React Components/Pages/About/About.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Landing","className","Component","withRouter","Experience","Home","About","App","props","state","basename","process","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mVAIMA,G,mLAEE,OACI,yBAAKC,UAAU,WACX,yBAAKA,UAAU,iBAAf,qBACA,yBAAKA,UAAU,kBACX,yBAAKA,UAAU,yBAAf,yCAGA,yBAAKA,UAAU,yBAAf,6CAGA,yBAAKA,UAAU,yBAAf,kDAIJ,yBAAKA,UAAU,oBACX,yBAAKA,UAAU,gBACX,yBAAKA,UAAU,sBAAf,YAEJ,yBAAKA,UAAU,gBACX,yBAAKA,UAAU,sBAAf,iB,GArBFC,cA6BPC,cAAWH,GC7BpBI,G,6KAEE,OACI,yBAAKH,UAAU,uBACX,yBAAKA,UAAU,cACX,yBAAKA,UAAU,uBAAf,oB,GALKC,cAYVC,cAAWC,GCVpBC,E,uKAEE,OACI,yBAAKJ,UAAU,QACX,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GALGC,aAWJC,cAAWE,GCbpBC,G,6KAEE,OACI,yBAAKL,UAAU,SAAf,wB,GAHQC,cAULC,cAAWG,GCUXC,E,kDAjBX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,GAFE,E,qDAMf,OACI,kBAAC,IAAD,CAAQC,SAAUC,IACd,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWT,IACjC,kBAAC,IAAD,CAAOO,OAAK,EAACC,KAAK,SAASC,UAAWR,U,GAXxCJ,aCMEa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.632f28bc.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { withRouter, Link } from 'react-router-dom';\r\nimport './landing.scss';\r\n\r\nclass Landing extends Component {\r\n    render() {\r\n        return (\r\n            <div className='landing'>\r\n                <div className='landing__name'>Hey! I'm Brij....</div>\r\n                <div className='landing__typer'>\r\n                    <div className='landing__typer--line1'>\r\n                        A passionate web developer, who loves\r\n                    </div>\r\n                    <div className='landing__typer--line2'>\r\n                        deep-diving in the realm of data-science,\r\n                    </div>\r\n                    <div className='landing__typer--line3'>\r\n                        and knows his way around the piano keys... :)\r\n                    </div>\r\n                </div>\r\n                <div className='landing__btn-grp'>\r\n                    <div className='landing__btn'>\r\n                        <div className='landing__btn--text'>Contact</div>\r\n                    </div>\r\n                    <div className='landing__btn'>\r\n                        <div className='landing__btn--text'>Resume</div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withRouter(Landing);\r\n","import React, { Component } from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\nimport './experience.scss';\r\n\r\nclass Experience extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"experience--wrapper\">\r\n                <div className=\"experience\">\r\n                    <div className=\"experience__heading\">EXPERIENCE</div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withRouter(Experience);","import React, { Component } from 'react';\r\nimport { withRouter, Link } from 'react-router-dom';\r\nimport './home.scss';\r\nimport Landing from '../../Layout/Landing/Landing';\r\nimport Experience from '../../Layout/Experience/Experience';\r\n\r\nclass Home extends Component {\r\n    render() {\r\n        return (\r\n            <div className='home'>\r\n                <Landing />\r\n                <Experience />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withRouter(Home);\r\n","import React, { Component } from 'react';\r\nimport { withRouter, Link } from 'react-router-dom';\r\nimport './about.scss';\r\n\r\nclass About extends Component {\r\n    render() {\r\n        return (\r\n            <div className='about'>\r\n                Welcome to About\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withRouter(About);","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport Home from './React Components/Pages/Home/Home';\nimport About from './React Components/Pages/About/About';\n\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {};\n    }\n\n    render() {\n        return (\n            <Router basename={process.env.PUBLIC_URL}>\n                <Switch>\n                    <Route exact path='/' component={Home} />\n                    <Route exact path='/about' component={About} />\n                </Switch>\n            </Router>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}